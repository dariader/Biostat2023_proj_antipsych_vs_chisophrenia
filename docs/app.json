[{"name":"server.R","content":"function(input, output, session) {\n  output$plot <- renderPlot({\n    plot(data)\n  })\n  \n  output$cat_barplot <- renderPlotly({\n    variable <- input$cat_variable\n    split_by_visit <- input$split_by_visit\n    \n    gg <- ggplot(data, aes(x = !!as.symbol(variable), fill = !!as.symbol(variable))) +\n      geom_bar() +\n      labs(title = paste(\"Barplot for\", variable)) +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    \n    if (split_by_visit) {\n      gg <- gg + facet_wrap(~visit)\n    }\n    \n    ggplotly(gg)\n  })\n  \n  output$num_plot <- renderPlotly({\n    variable <- input$num_variable\n    split_by_visit_num <- input$split_by_visit_num\n    plot_type <- input$plot_type\n    \n    gg <- ggplot(data, aes(x = !!as.symbol(variable))) +\n      labs(title = paste(\"Plot for\", variable))\n    \n    if (plot_type == \"histogram\") {\n      gg <- gg + geom_histogram(fill = \"skyblue\", bins = 10)\n    } else if (plot_type == \"density\") {\n      gg <- gg + geom_density(fill = \"skyblue\")\n    } else if (plot_type == \"boxplot\") {\n      gg <- ggplot(data) +\n        labs(title = paste(\"Plot for\", variable)) + geom_boxplot(aes(y = !!as.symbol(variable)), fill = \"skyblue\")\n    }\n    \n    if (split_by_visit_num) {\n      gg <- gg + facet_wrap(~visit)\n    }\n    \n    if (split_by_visit_num & plot_type == \"boxplot\"){\n      gg <-  ggplot(data, aes(x = visit, y = !!as.symbol(variable))) +\n        labs(title = paste(\"Plot for\", variable)) +\n        geom_boxplot(fill = \"skyblue\")\n    }\n    \n    ggplotly(gg)\n  })\n  \n  output$difference <- renderPlotly({\n    dif_plot <- difference_df %>%\n      gather(variable, value, -id) %>%\n      filter(!grepl(\"G[1-9]|N[1-7]|P[1-7]_dif$\", variable)) %>%\n      group_by(variable) %>%\n      summarise(mean_value = mean(value, na.rm = TRUE)) %>%\n      filter(grepl(\"_dif$\", variable)) %>%\n      mutate(variable = gsub(\"_dif$\", \"\", variable)) %>%\n      filter(variable %in% c(\"Total.score.PANSS\", \"tremor\", \"akathisia\", \"head.rotation\", \"Total.score.SAS\", \"ZVM\", \"ZTol\", \"ZMT\", \"ZVF\", \"Comp.Z\")) %>% \n      mutate(variable = case_when(\n        variable == \"ZVM\" ~ \"Verbal Memory\",\n        variable == \"ZMT\" ~ \"Motor Test\",\n        variable == \"ZVF\" ~ \"Speech Fluency\",\n        variable == \"ZTol\" ~ \"Tower of London\",\n        variable == \"Comp.Z\" ~ \"Composite BACS Score\",\n        variable == \"tremor\" ~ \"Tremor\",\n        variable == \"akathisia\" ~ \"Akathisia\",\n        variable == \"head.rotation\" ~ \"Head Rotation\",\n        variable == \"Total.score SAS\" ~ \"Total score SAS\",\n        TRUE ~ variable\n      )) %>%\n      mutate(variable = factor(variable, levels = c(\"Total.score.PANSS\", \"Verbal Memory\", \"Motor Test\", \"Speech Fluency\", \"Tower of London\", \"Composite BACS Score\", \"Tremor\", \"Akathisia\", \"Head Rotation\", \"Total score SAS\"))) %>%\n      ggplot(aes(x = variable, y = mean_value, fill = factor(sign(mean_value)))) +\n      geom_bar(stat = \"identity\", color = \"black\") +\n      scale_fill_manual(values = c(\"#6600FF\", \"#CC3333\", \"green\"), name = \"Sign\", labels = c(\"Negative\", \"Zero\", \"Positive\")) +\n      labs(title = \"Mean Deviation of Variables\",\n           x = \"Variables\",\n           y = \"Mean Deviation\") +\n      theme_minimal() +\n      guides(fill = FALSE) +\n      theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))\n    \n    ggplotly(dif_plot)\n  })\n  \n  output$corr <- renderPlotly({\n    select_corr <- input$select_corr\n    select_gen <- input$select_generation\n    # Define a regular expression pattern for items to exclude\n    pattern_to_exclude <- \"^(G|N|P)[0-9]+$\"\n    \n    # Use grep to select items that do not match the pattern\n    selected_items <- numeric_variables[!grepl(pattern_to_exclude, numeric_variables)]\n    \n    if(select_corr %in% 'all'){\n      corr_data <- data\n    }\n    if(select_corr %in% '1'){\n      corr_data <- data[data$visit==1,]\n    }\n    if(select_corr %in% '2'){\n      corr_data <- data[data$visit==2,]\n    }\n    if(select_corr %in% 'difference'){\n      # variables that should not be subtracted\n      corr_data <- difference_df\n    }\n    \n    #if(select_gen %in% '1'){\n    #  corr_data <- corr_data[corr_data[,'antipsychotic.generation'] == 1,]\n    #}\n    #if(select_gen %in% '2'){\n    #  corr_data <- corr_data[corr_data[,'antipsychotic.generation'] == 2,]\n    #}\n    #if(select_gen %in% '3'){\n    #  corr_data <- corr_data[corr_data[,'antipsychotic.generation'] == 3,]\n    #s}\n    \n    data_num <- corr_data[,c(selected_items)]\n    \n    # Assuming cor_matrix is your correlation matrix and clusters is the result of hierarchical clustering\n    cor_matrix <- cor(data_num)\n    dendrogram <- hclust(dist(1 - cor_matrix))\n    clusters <- cutree(dendrogram, k = 3)\n    \n    # Reorder the correlation matrix based on the clustering\n    sorted_cor_matrix <- cor_matrix[order.dendrogram(as.dendrogram(dendrogram)),\n                                    order.dendrogram(as.dendrogram(dendrogram))]\n    #color_intervals <- c(-5, -0.9, -0.3, 0.3, 0.9, 5)\n    #colors <- c(\"green\", \"white\", \"white\", \"white\", \"white\",\"red\")\n    \n    # Create a clustered heatmap using Plotly\n    cor_plot <- plot_ly(z = sorted_cor_matrix,\n                        colorscale = 'Viridis',  # You can choose a different color scale\n                        x = colnames(sorted_cor_matrix),\n                        y = rownames(sorted_cor_matrix),\n                        type = \"heatmap\")\n    \n    # Show the plot\n    cor_plot\n  })\n  \n  output$scatterplot <- renderPlot({\n    x_variable <- input$scatter_x\n    y_variable <- input$scatter_y\n    split_by_visit_scatter <- input$split_by_visit_scatter\n    correlation_method <- \"spearman\"\n    gg <- ggplot(data, aes(x = !!as.symbol(x_variable), y = !!as.symbol(y_variable))) +\n      geom_point(aes(col=gender)) + #, size=`antipsychotic generation`\n      geom_smooth(method=\"lm\", col = 'black') +\n      labs(title = paste(\"Scatterplot for\", x_variable, \"and\", y_variable)) +\n      theme_minimal()\n    x_center <- mean(range(data[[x_variable]]))\n    y_center <- mean(range(data[[y_variable]]))\n    \n    if (split_by_visit_scatter) {\n      gg <- gg + facet_grid(~visit) +\n        geom_text(data = data %>% group_by(visit) %>%\n                    summarize(cor = cor(!!as.symbol(x_variable), !!as.symbol(y_variable), method = correlation_method),\n                              p_value = cor.test(!!as.symbol(x_variable), !!as.symbol(y_variable), method = correlation_method)$p.value,\n                              ci_low = spearman.ci(data[[x_variable]], data[[y_variable]])$conf.int[1],\n                              ci_high = spearman.ci(data[[x_variable]], data[[y_variable]])$conf.int[2]),\n                  aes(label = paste(\"r: \", round(cor, 2), \"\\np-value: \", round(p_value, 4),\n                                    paste(\"\\nCI: [\", round(ci_low, 2), \", \", round(ci_high, 2), \"]\"))),\n                  x = x_center, y = y_center, hjust = 0.5, vjust = 0.5, size = 8) +\n        annotate(\"text\", x = Inf, y = -Inf, label = \"*method: spearman\", hjust = 1, vjust = 0, size = 5, color = \"black\")\n    } else {\n      cor_test_result <- cor.test(data[[x_variable]], data[[y_variable]], method = correlation_method)\n      correlation_coefficient <- cor_test_result$estimate\n      p_value <- cor_test_result$p.value\n      ci_low <- spearman.ci(data[[x_variable]], data[[y_variable]])$conf.int[1]\n      ci_high <- spearman.ci(data[[x_variable]], data[[y_variable]])$conf.int[2]\n      gg <- gg + annotate(\"text\", x = x_center, y = y_center,\n                          label = paste(\"r: \", round(correlation_coefficient, 2), \"\\np-value: \", round(p_value, 4),\n                                        paste(\"\\nCI: [\", round(ci_low, 2), \", \", round(ci_high, 2), \"]\")),\n                          hjust = 0.5, vjust = 0.5, size = 8) +\n        annotate(\"text\", x = Inf, y = -Inf, label = \"*method: spearman\", hjust = 1, vjust = 0, size = 5, color = \"black\")\n    }\n    \n    print(gg)\n  })\n  \n  \n  output$summary <- renderPrint({\n    summary(data)\n  })\n  \n  output$table <- DT::renderDataTable({\n    DT::datatable(data)\n  })\n  \n  # Реактивное значение для отслеживания выбранных предикторов\n  selected_predictors <- reactiveVal(character(0))\n  \n  # Обработка изменений в выборе предикторов\n  observe({\n    selected_predictors(input$predictors)\n  })\n  \n  # Создание динамического UI для выбора предикторов\n  output$predictor_selector <- renderUI({\n    selectInput(\"predictors\", \"Предикторы:\",\n                choices = c(\"\", names(data)),\n                selected = selected_predictors(),\n                multiple = TRUE)\n  })\n  \n  # Реактивный блок для проведения линейной регрессии\n  regression_model <- reactive({\n    if (length(selected_predictors()) == 0) {\n      # Если не выбран ни один предиктор, строим модель по интерцепту\n      formula_str <- as.formula(paste(input$response_var, \"~ 1\"))\n    } else {\n      # Добавляем взаимодействие, если выбран соответствующий чекбокс\n      if (input$interaction_checkbox) {\n        formula_str <- as.formula(paste(input$response_var, \"~\", paste(selected_predictors(), collapse = \" * \")))\n      } else {\n        formula_str <- as.formula(paste(input$response_var, \"~\", paste(selected_predictors(), collapse = \" + \")))\n      }\n    }\n    lm(formula_str, data = data)\n  })\n  \n  # Вывод результатов линейной регрессии с использованием tidy и kable\n  output$regression_table <- renderTable({\n    tidy_table <- tidy(regression_model())\n    kable(tidy_table, \"html\", align = \"c\", escape = FALSE) %>%\n      kable_styling(\"striped\", full_width = FALSE) %>%\n      row_spec(which(tidy_table$p.value < 0.05), background = \"#99FF99\")  # Задайте цвет для значимых строк\n  }, sanitize.text.function = function(x) x)\n  \n  # Вывод R-квадрата\n  output$r_squared_value <- renderText({\n    r_squared <- summary(regression_model())$r.squared\n    paste(\"R-squared: \", round(r_squared, 4))\n  })\n  \n  # Вывод R-квадрата скорректированного\n  output$adj_r_squared_value <- renderText({\n    adj_r_squared <- summary(regression_model())$adj.r.squared\n    paste(\"Adjusted R-squared: \", round(adj_r_squared, 4))\n  })\n  \n  # Вывод F-статистики и p-value\n  output$f_statistic <- renderText({\n    regression_summary <- summary(regression_model())\n    \n    if (\"fstatistic\" %in% names(regression_summary)) {\n      f_statistic <- regression_summary$fstatistic\n      result <- paste(\"F-statistic: \", round(f_statistic[1], 4))\n    } else {\n      result <- \" \"\n    }\n    \n    return(result)\n  })\n  \n  output$p_value_f_statistic <- renderText({\n    regression_summary <- summary(regression_model())\n    \n    if (\"fstatistic\" %in% names(regression_summary)) {\n      p_value <- overall_p(regression_model())\n      result <- paste(\"p-value: \", format(p_value, digits = 4))\n    } else {\n      result <- \" \"\n    }\n    \n    return(result)\n  })\n  \n  \n}\n\n# shinylive::export(appdir = \"app\", destdir = \"docs\")\n# httpuv::runStaticServer(\"docs/\", port=8008)","type":"text"},{"name":"ui.R","content":"library(markdown)\n\nnavbarPage(\"Biostat2023\",\n           navbarMenu(\"Simulated Data Description\",\n                      tabPanel(\"Table with simulated data\",\n                               # generated data overview\n                               DT::dataTableOutput(\"table\")\n                      ),\n                      tabPanel(\"Numerical data\",\n                               selectInput(\"num_variable\", \"Select numeric variable\", choices = numeric_variables),\n                               checkboxInput(\"split_by_visit_num\", \"Split by 'visit'\", value = FALSE),\n                               radioButtons(\"plot_type\", \"Select plot type:\",\n                                            choices = c(\"Histogram\" = \"histogram\", \"Density\" = \"density\", \"Boxplot\" = \"boxplot\"),\n                                            selected = \"histogram\"),\n                               plotlyOutput(\"num_plot\")\n                      ),\n                      tabPanel(\"Categorical data\",\n                               selectInput(\"cat_variable\", \"Select categorical variable\", choices = categorical_variables),\n                               checkboxInput(\"split_by_visit\", \"Split by 'visit'\", value = FALSE),\n                               plotlyOutput(\"cat_barplot\")\n                      ),\n                      tabPanel(\"Difference between visits\",\n                               plotlyOutput(\"difference\")\n                      ),\n                      \n           ),\n           navbarMenu(\"Association\",\n                      tabPanel(\"Interactive Heatmap\",\n                               # generated data overview\n                               selectInput(\"select_corr\", \"Select visit\", choices = c('all','1','2')), # ,'difference'\n                               #selectInput(\"select_generation\", \"Select generation\", choices = c('all','1','2','3')),\n                               plotlyOutput(\"corr\")\n                      ),\n                      tabPanel(\"Scatterplot\",\n                               selectInput(\"scatter_x\", \"Select variable for X-axis\", choices = numeric_variables),\n                               selectInput(\"scatter_y\", \"Select variable for Y-axis\", choices = numeric_variables),\n                               checkboxInput(\"split_by_visit_scatter\", \"Split by 'visit'\", value = FALSE),\n                               plotOutput(\"scatterplot\")\n                      ),\n                     # tabPanel(\"Hypothesis 1\",\n                               \n                     # ),\n                    #  tabPanel(\"Hypothesis 2\",\n                               \n                    #  )\n           ),\n           tabPanel(\"Linear models\",\n                    #verbatimTextOutput(\"summary\")\n                    sidebarLayout(\n                      sidebarPanel(\n                        selectInput(\"response_var\", \"Предсказываемая переменная:\",\n                                    choices = names(data),\n                                    selected = grep(\"^Comp\", names(data), value = TRUE)[1],\n                                    multiple = FALSE),\n                        uiOutput(\"predictor_selector\"),\n                        checkboxInput(\"interaction_checkbox\", \"Взаимодействие факторов\", value = FALSE),\n                        #actionButton(\"reset_button\", \"Сбросить предикторы\")\n                      ),\n                      mainPanel(\n                        tableOutput(\"regression_table\"),\n                        textOutput(\"r_squared_value\"),\n                        textOutput(\"adj_r_squared_value\"),\n                        textOutput(\"f_statistic\"),  \n                        textOutput(\"p_value_f_statistic\")  \n                      )\n                    )\n           ),\n\n)","type":"text"},{"name":"f_generate_data.R","content":"column_names <- c(\"id\", \"gender\", \"age\", \"disease duration\", \"antipsychotic\", \n               \"antipsychotic dose\", \"antipsychotic generation\", \"THF dose\", \n               \"course\", \"education\", \"smoke\", \"visit\", \"gait\", \"arm dropping\", \n               \"shoulder shaking\", \"elbow rigidity\", \"wrist rigidity\", \"head rotation\", \n               \"glabella tap\", \"tremor\", \"salivation\", \"akathisia\", \"Total score SAS\", \n               \"P1\", \"P2\", \"P3\", \"P4\", \"P5\", \"P6\", \"P7\", \"Positive scale\", \"N1\", \n               \"N2\", \"N3\", \"N4\", \"N5\", \"N6\", \"N7\", \"Negative scale\", \"G1\", \"G2\", \n               \"G3\", \"G4\", \"G5\", \"G6\", \"G7\", \"G8\", \"G9\", \"G10\", \"G11\", \"G12\", \n               \"G13\", \"G14\", \"G15\", \"G16\", \"General Psychopathology scale\", \n               \"Total score PANSS\", \"Verbal Memory\", \"ZVM\", \"Digit Sequencing\", \n               \"ZDS\", \"Token Motor Task\", \"ZMT\", \"Verbal Fluency\", \"ZVF\", \"Symbol Coding\", \n               \"ZSC\", \"Tower of London\", \"ZToL\", \"Comp Z\", \"negative\", \"excitment\", \n               \"cognitive\", \"positive\", \"depression\", \"CPZE\")\ngender_sample = rbinom(n = 30, size = 1, prob = 0.45)\nage_sample = round(rnorm(30, mean = 30, sd = 5))\ndisease_sample  = round(rnorm(30, mean = 18, sd = 1))\nanti  = round(rnorm(30, mean = 18, sd = 1))\ndisease_sample  = round(rnorm(30, mean = 18, sd = 1))\n\ngenerate_data <- function(){\n  return(data.frame(\n    id = as.factor(c(1:30, 1:30)),\n    gender = c(gender_sample, gender_sample),\n    age = c(age_sample, age_sample),\n    `disease duration` = round(runif(30, 1, 32)),\n    antipsychotic = as.factor(rep(c(\"арипипразол\", \"карипразин\", \"рисперидон\", \"галоперидол\", \"кветиапин\", \"зуклопентиксол\", \"(Other)\"), each = 5)[1:30]),\n    `antipsychotic dose` = rep(c(20, 10, 15, 30, 4.5), each = 6)[1:30],\n    `antipsychotic generation` = rep(1:3, each = 10)[1:30],\n    `THF dose` = round(runif(30, 0, 10)),\n    course = as.factor(rep(c(\"эпизодический ремиттирующий\", \"эпизодический тип со стабильным дефектом\", \"персистирующий\", \"персистирующий с высоким уровнем симптомов\"), each = 7)[1:30]),\n    education = as.factor(rep(c(\"высшее\", \"незаконченное высшее\", \"среднее общее\", \"среднее профессиональное\"), times = c(5, 10, 5, 10))),\n    smoke = as.factor(rbinom(n = 30, size = 1, prob = 0.3)),\n    visit = as.factor(rep(c(1,2), times = c(30, 30))),\n    gait = c(round(runif(30, 0, 4)), round(runif(30, 0, 4))),\n    `arm dropping` = c(round(runif(30, 0, 2)), round(runif(30, 0, 2))),\n    `shoulder shaking` = c(runif(30, 0, 3),runif(30, 0, 3)),\n    `elbow rigidity` = c(runif(30, 0, 3),runif(30, 0, 3)),\n    `wrist rigidity` = c(runif(30, 0, 2),runif(30, 0, 3)),\n    `head rotation` = c(runif(30, 0, 3),runif(30, 0, 3)),\n    `glabella tap` = c(round(runif(30, 0, 3)),runif(30, 0, 3)),\n    tremor = c(round(runif(30, 0, 3)),runif(30, 0, 3)),\n    salivation = c(round(runif(30, 0, 2)),runif(30, 0, 3)),\n    akathisia = c(round(runif(30, 0, 3)),runif(30, 0, 3)),\n    `Total score SAS` = c(round(runif(30, 0, 16)),runif(30, 0, 3)),\n    P1 = round(runif(30, 1, 5)),\n    P2 = round(runif(30, 1, 6)),\n    P3 = round(runif(30, 1, 6)),\n    P4 = round(runif(30, 1, 5)),\n    P5 = round(runif(30, 1, 4)),\n    P6 = round(runif(30, 1, 5)),\n    P7 = round(runif(30, 1, 6)),\n    `Positive scale` = round(runif(30, 7, 32)),\n    N1 = round(runif(30, 1, 6)),\n    N2 = round(runif(30, 1, 5)),\n    N3 = round(runif(30, 1, 5)),\n    N4 = round(runif(30, 1, 6)),\n    N5 = round(runif(30, 1, 6)),\n    N6 = round(runif(30, 1, 5)),\n    N7 = round(runif(30, 1, 5)),\n    `Negative scale` = round(runif(30, 9, 32)),\n    G1 = round(runif(30, 1, 4)),\n    G2 = round(runif(30, 1, 5)),\n    G3 = round(runif(30, 1, 5)),\n    G4 = round(runif(30, 1, 6)),\n    G5 = round(runif(30, 1, 5)),\n    G6 = round(runif(30, 1, 6)),\n    G7 = round(runif(30, 1, 5)),\n    G8 = round(runif(30, 1, 5)),\n    G9 = round(runif(30, 1, 5)),\n    G10 = round(runif(30, 1, 3)),\n    G11 = round(runif(30, 1, 5)),\n    G12 = round(runif(30, 1, 6)),\n    G13 = round(runif(30, 1, 5)),\n    G14 = round(runif(30, 1, 5)),\n    G15 = round(runif(30, 1, 5)),\n    G16 = round(runif(30, 1, 6)),\n    `General Psychopathology scale` = round(runif(30, 17, 62)),\n    `Total score PANSS` = round(runif(30, 36, 122)),\n    `Verbal Memory` = round(runif(30, 18, 67)),\n    `ZVM` = runif(30, -4.5, 2.14),\n    `Digit Sequencing` = round(runif(30, 3, 26)),\n    `ZDS` = runif(30, -5.130, 1.360),\n    `Token Motor Task` = round(runif(30, 18, 100)),\n    `ZMT` = runif(30, -5.5, 3.14),\n    `Verbal Fluency` = round(runif(30, 17, 71)),\n    `ZVF` = runif(30, -3.8, 1),\n    `Symbol Coding` = round(runif(30, 17, 69)),\n    `ZSC` = runif(30, -7, 22),\n    `Tower of London` = round(runif(30, 18, 67)),\n    `ZToL` = runif(30, -6.65, 2.24),\n    `Comp Z` = runif(30, 14.19, 62.18),\n    `negative` = round(runif(30, 7, 31)),\n    `excitment` = round(runif(30, 4, 21)),\n    `cognitive` = round(runif(30, 5, 23)),\n    `positive` = round(runif(30, 4, 17)),\n    `depression` = round(runif(30, 5, 23)),\n    `CPZE` = runif(30, 0.38, 11.240)\n  ))\n}  \n\ngenerate_data()\n","type":"text"},{"name":"f_get_vars.R","content":"\nget_categorical_vars <- function(data){\n  \n  # Categorical variables\n  return(data %>% select_if(is.factor) %>% names())\n  \n}\n\nget_numerical_vars <- function(data) {\n  \n  # Numeric variables\n  return(data %>% select_if(is.numeric) %>% names())\n  \n}","type":"text"},{"name":"f_make_difference_df.R","content":"make_dif_df <- function(data, numeric_variables, categorical_variables) {\n  \n  data[categorical_variables] <- lapply(data[categorical_variables], as.factor)\n  data[numeric_variables] <- lapply(data[numeric_variables], as.numeric)\n  \n  # Выбираем только числовые переменные\n  selected_variables <- data %>%\n    select(!matches(\"P\\\\d{1}\") & !matches(\"N\\\\d{1}\")) %>% \n    select_if(is.numeric) %>% \n    names()\n  \n  # переменные которые не нужно вычитать\n  add_df <- data %>% \n    filter(visit == 1) %>% \n    select(id, age, `disease.duration`, `THF.dose`, CPZE)\n  \n  # Создаем новый датафрейм для хранения разницы\n  difference_df <- data %>%\n    select(id, visit, all_of(selected_variables)) %>%\n    group_by(id) %>%\n    summarise(across(selected_variables, ~diff(.))) %>% \n    mutate(age = add_df$age,\n           `disease.duration` = add_df$`disease.duration`,\n           `THF.dose` = add_df$`THF.dose`, \n           CPZE = add_df$CPZE\n    ) %>% \n    rename_with(~paste0(., \"_dif\"), -c(id, age, `disease.duration`, `THF.dose`, CPZE))  # Добавляем суффикс \"_dif\" \n  \n  return(difference_df)\n}\n","type":"text"},{"name":"f_overall_p.R","content":"overall_p <- function(my_model) {\n  f <- summary(my_model)$fstatistic\n  p <- pf(f[1],f[2],f[3],lower.tail=F)\n  attributes(p) <- NULL\n  return(p)\n}\n","type":"text"},{"name":"global.R","content":"library('ggplot2')\nlibrary('plotly')\nlibrary('RVAideMemoire')\nlibrary('dplyr')\nlibrary('tidyverse')\nlibrary('kableExtra')\nlibrary('broom')\nlibrary('reshape2')\nsource('f_generate_data.R')\nsource('f_get_vars.R')\nsource('f_make_difference_df.R')\nsource('f_overall_p.R')\ndata <- generate_data()\ncategorical_variables <- get_categorical_vars(data)\nnumeric_variables <- get_numerical_vars(data)\ndifference_df <- make_dif_df(data, numeric_variables, categorical_variables)\n","type":"text"}]
